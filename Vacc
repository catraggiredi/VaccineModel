import numpy as np
import seaborn
import matplotlib.pyplot as plt

def NextStep(covU=0.85, covR=0.8, migpar=0.1, br=(18.1/1000), R0=5, SaU=0.06,SbU=0.04,ScU=0.03,SdU=0.01,SeU=0.01,SaR=0.09,SbR=0.05,ScR=0.02,SdR=0.03,SeR=0.01,VbU=0.35,VcU=0.25,VdU=0.15,VeU=0.1,VbR=0.3,VcR=0.25,VdR=0.2,VeR=0.05,survaU=0.98,survbU=0.99,survcU=0.985,survdU=0.95,surveU=0.9,survaR=0.95,survbR=0.97,survcR=0.96,survdR=0.9,surveR=0.85):
    '''
    cov - coverage
    migpar - migration parameter relative to birth rate
    br - birth rate. Currently set to stock value given world average
    R0 = Rnought value for a given disease. Currently set to 18 for measles
    SaU - This variable and similar variables begin with either an S or a V to show susceptibility vs vaccination, then a letter between a-e to show the age group, and either a U or an R to show urban vs rural populations.
    surv__ - variables beginning with this are the survival rates for age groups a-e in populations U and V
    
    In the below code, variables like SaUt show the next value of SaU in time step t
    '''
    #NOTES AND THINGS TO CHANGE
    #widen range x hm tp 30,change color using colormaps library (set to veritas vi/vis or magma), switch color. 
    #learn/start latex, put bullet points in sections, overleaf
     
    #Vaccination rate at birth is 0 for both rural and urban populations
    VaR = 0
    VaU = 0
    #Newborn Pop relative to population of group C
    SaUt = br * (ScU + VcU) 
    
    SbUt = (survbU * .75 * SbU) + (survaU * (1 - covU) * SaU)
    VbUt = (survbU * .75 * VbU) + (survaU * covU * VaU)
    
    ScUt = (survcU * (14 / 15) * ScU) + (survbU * 0.15 * SbU)
    VcUt = (survcU * (14 / 15) * VcU) + (survbU * 0.15 * VbU)
    
    migration = migpar* survdR * SdR
    migrationvacc = migpar * survdR * VdR
    
    SdUt = (survdU * (29 / 30) * SdU) + (survcU * ScU / 15) + migration
    VdUt = (survdU * (29 / 30) * VdU) + (survcU * VcU / 15) + migrationvacc
    
    SeUt = (surveU * SeU) + (survdU * SdU / 30)
    VeUt = (surveU * VeU) + (survdU * VdU / 30)
    
    SaRt = br * (ScR + VcR)
    
    SbRt = (survbR * .75 * SbR) + (survaR * (1 - covR) * SaR)
    VbRt = (survbR * .75 * VbR) + (survaR * covR * VaR)
    
    ScRt = (survcR * (14 / 15) * ScR) + (survbR * 0.15 * SbR)
    VcRt = (survcR * (14 / 15) * VcR) + (survbR * 0.15 * VbR)
    
    SdRt = (survdR * (29 / 30) * SdR * (1 - migpar)) + (survcR * ScR / 15)
    VdRt = (survdR * (29 / 30) * VdR * (1-migpar)) + (survcR * VcR / 15)
    
    SeRt = (surveR * SeR) + (survdR * SdR / 30)
    VeRt = (surveR * VeR) + (survdR * VdR / 30)
    
    UrbanVaccRates = [VaU, VbUt, VcUt, VdUt, VeUt]
    UrbanSuscRates = [SaUt, SbUt, ScUt, VcUt, VeRt]
    
    RuralVaccRates = [VaR, VbRt, VcRt, VdRt, VeRt]
    RuralSuscRates = [SaRt, SbRt, ScRt, SdRt, SeRt]
    
    TotalUrb = sum(UrbanVaccRates) + sum(UrbanSuscRates)
    TotalRur = sum(RuralVaccRates) + sum(RuralSuscRates)
    
    for i in range(0,5):
        
        UrbanVaccRates[i] = UrbanVaccRates[i] / TotalUrb
        UrbanSuscRates[i] = UrbanSuscRates[i] / TotalUrb
        
        RuralVaccRates[i] = RuralVaccRates[i] / TotalRur
        RuralSuscRates[i] = RuralSuscRates[i] / TotalRur
    
    UrbanRates = (UrbanSuscRates, UrbanVaccRates)
    RuralRates = (RuralSuscRates, RuralVaccRates)
    
    return(UrbanRates, RuralRates)

def HerdImmunity(covU=0.85, covR=0.8, migpar=0.1, br=(18.1/1000), R0=5, SaU=0.06,SbU=0.04,ScU=0.03,SdU=0.01,SeU=0.01,SaR=0.09,SbR=0.05,ScR=0.02,SdR=0.03,SeR=0.01,VbU=0.35,VcU=0.25,VdU=0.15,VeU=0.1,VbR=0.3,VcR=0.25,VdR=0.2,VeR=0.05,survaU=0.98,survbU=0.99,survcU=0.985,survdU=0.95,surveU=0.9,survaR=0.95,survbR=0.97,survcR=0.96,survdR=0.9,surveR=0.85):
    
    Urban, Rural = NextStep(covU, covR, migpar, br, R0, SaU, SbU, ScU, SdU, SeU, SaR, SbR, ScR, SdR, SeR, VbU, VcU, VdU, VeU, VbR, VcR, VdR, VeR, survaU, survbU, survcU, survcU, survdU, surveU, survaR, survbR, survcR, survdR, surveR) 
    '''
    Given the Rnought value look for the new R susceptible value to calculate how it
    is influenced by vaccination rate
    '''
    MinVacc = 1 - (1 / R0)
    TotVacc = Urban[1][1] + Urban[1][2] + Urban[1][3] + Urban[1][4]
    return(TotVacc > MinVacc)

def OverTime(t, covU=0.85, covR=0.8, migpar=0.1, br=(18.1/1000), R0=5, SaU=0.06,SbU=0.04,ScU=0.03,SdU=0.01,SeU=0.01,SaR=0.09,SbR=0.05,ScR=0.02,SdR=0.03,SeR=0.01,VbU=0.35,VcU=0.25,VdU=0.15,VeU=0.1,VbR=0.3,VcR=0.25,VdR=0.2,VeR=0.05,survaU=0.98,survbU=0.99,survcU=0.985,survdU=0.93,surveU=0.88,survaR=0.95,survbR=0.97,survcR=0.96,survdR=0.88,surveR=0.84):
    '''
    Iterates through the NextStep function t times
    Takes the same parameters as NextStep in addition to t
    Returns a list with two tuples, each of which contains susceptibility and vaccination rates for Urban and Rural populations
    '''
    for i in range(1, t+1):
        if i == t:
            return(NextStep(covU, covR, migpar, br, R0, SaU, SbU, ScU, SdU, SeU, SaR, SbR, ScR, SdR, SeR, VbU, VcU, VdU, VeU, VbR, VcR, VdR, VeR, survaU, survbU, survcU, survdU, surveU, survaR, survbR, survcR, survdR, surveR))
        else:
            Urban, Rural = NextStep(covU, covR, migpar, br, R0, SaU, SbU, ScU, SdU, SeU, SaR, SbR, ScR, SdR, SeR, VbU, VcU, VdU, VeU, VbR, VcR, VdR, VeR, survaU, survbU, survcU, survdU, surveU, survaR, survbR, survcR, survdR, surveR)
            
            SaU = Urban[0][0]
            SbU = Urban[0][1]
            ScU = Urban[0][2]
            SdU = Urban[0][3]
            SeU = Urban[0][4]
            
            VbU = Urban[1][1]
            VcU = Urban[1][2]
            VdU = Urban[1][3]
            VeU = Urban[1][4]
            
            SaR = Rural[0][0]
            SbR = Rural[0][1]
            ScR = Rural[0][2]
            SdR = Rural[0][3]
            SeR = Rural[0][4]
            
            VbR = Rural[1][1]
            VcR = Rural[1][2]
            VdR = Rural[1][3]
            VeR = Rural[1][4]   

def LowestVacc(covU, Rural, migpar, herd):
    '''
    covU = decimal number representing proportion of an Urban population that is covered by vaccination
    Rural = A list with two lists within that each represent susceptibility and vaccination rates for a rural population
    migpar = percentage of people in rural age group D that migrate
    herd = Lowest vaccination rate needed in the urban population to maintain herd immunity 
    
    Returns a value representing the lowest vaccination rate needed in the rural population for herd immunity
    '''
    TotalMig = migpar * (Rural[0][3] + Rural[1][3]) #Takes total migration from the rural population
    LowestVacc = ((herd * (1 + TotalMig))-covU) / TotalMig
    if LowestVacc < 0:
        return(0)
    elif LowestVacc > 1:
        return(1)
    else:
        return(LowestVacc)

def creatematrix(br=(18.1/1000), R0=10, SaU=0.06,SbU=0.04,ScU=0.03,SdU=0.01,SeU=0.01,SaR=0.09,SbR=0.05,ScR=0.02,SdR=0.03,SeR=0.01,VbU=0.35,VcU=0.25,VdU=0.15,VeU=0.1,VbR=0.3,VcR=0.25,VdR=0.2,VeR=0.05,survaU=0.98,survbU=0.99,survcU=0.985,survdU=0.95,surveU=0.9,survaR=0.95,survbR=0.97,survcR=0.96,survdR=0.9,surveR=0.85):
    matrix = []
    Rural = [[SaR, SbR, ScR, SdR, SeR], [0, VbR, VcR, VdR, VeR]]
    if R0 == 5:
        herd = 0.8
        d1 = 21
        ds = 0.01
    elif R0 == 10:
        herd = 0.90
        d1 = 11
        ds = 0.01
    elif R0 == 20:
        herd = 0.95
        d1 = 11
        ds = 0.005
    for i in range (0,d1):
        newcoverage = (i * ds) + herd
        row = []
        for j in range (1, 21):
            newmigration = j * 0.05
            rate = LowestVacc(newcoverage, Rural, newmigration, herd)
            row.append(rate)
        matrix.append(row)
    return(matrix, d1)

def heatmap(t = 100, covU = 0.8, covR=0.8, migpar = 0.1, br=(18.1/1000), R0=5, SaU=0.06,SbU=0.04,ScU=0.03,SdU=0.01,SeU=0.01,SaR=0.09,SbR=0.05,ScR=0.02,SdR=0.03,SeR=0.01,VbU=0.35,VcU=0.25,VdU=0.15,VeU=0.1,VbR=0.3,VcR=0.25,VdR=0.2,VeR=0.05,survaU=0.98,survbU=0.99,survcU=0.985,survdU=0.95,surveU=0.9,survaR=0.95,survbR=0.97,survcR=0.96,survdR=0.9,surveR=0.85):
    Urban, Rural = OverTime(t, covU, covR, migpar, br, R0, SaU, SbU, ScU, SdU, SeU, SaR, SbR, ScR, SdR, SeR, VbU, VcU, VdU, VeU, VbR, VcR, VdR, VeR, survaU, survbU, survcU, survdU, surveU, survaR, survbR, survcR, survdR, surveR)
    matrix, d1 = creatematrix(br, R0, Urban[0][0], Urban[0][1], Urban[0][2], Urban[0][3], Urban[0][4], SaR, SbR, ScR, SdR, SeR, VbU, VcU, VdU, VeU, VbR, VcR, VdR, VeR, survaU, survbU, survcU, survdU, surveU, survaR, survbR, survcR, survdR, surveR)
    array = np.asarray(matrix).reshape(d1, 20)
    y = list(range((101-d1), 101))
    x = list(range(5, 101, 5))
    hm = seaborn.heatmap(array, xticklabels = x, yticklabels = y, cmap="YlGnBu")
    hm.collections[0].colorbar.set_label("Lowest Vaccination Rate")
    hm.set_ylabel("Coverage Rate in Urban Population (Out of 100)")
    hm.set_xlabel("Migration Rates from Rural Population (Out of 100)")
    title = "Lowest Vaccination Rate Needed in a Migrating Rural Population Given Urban Coverage and Probability of Migration, R0=" + str(R0)
    hm.set_title(title)
    plt.show()
heatmap(R0=20)
