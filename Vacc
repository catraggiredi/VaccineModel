def NextStep(covU=0.1, covR=0.1, migpor=0.1, br=(18.1/1000), R0=5, SaU=0.1,SbU=0.1,ScU=0.1,SdU=0.1,SeU=0.1,SaR=0.1,SbR=0.1,ScR=0.1,SdR=0.1,SeR=0.1,VbU=0.125,VcU=0.125,VdU=0.125,VeU=0.125,VbR=0.125,VcR=0.125,VdR=0.125,VeR=0.125,survaU=0.9,survbU=0.9,surbcU=0.9,survcU=0.9,survdU=0.9,surveU=0.9,survaR=0.9,survbR=0.9,survcR=0.9,survdR=0.9,surveR=0.9):
    '''
    cov - coverage
    migpor - migration rate
    br - birth rate. Currently set to stock value given world average
    R0 = Rnought value for a given disease. Currently set to 18 for measles
    SaU - This variable and similar variables begin with either an S or a V to show susceptibility vs vaccination, then a letter between a-e to show the age group, and either a U or an R to show urban vs rural populations.
    surv__ - variables beginning with this are the survival rates for age groups a-e in populations U and V
    
    In the below code, variables like SaUt show the next value of SaU in time step t
    '''
    #Vaccination rate at birth is 0 for both rural and urban populations
    VaR = 0
    VaU = 0
    #Newborn Pop relative to population of group C
    SaUt = br * (ScU + VcU) 
    
    SbUt = (survbU * .75 * SbU) + (survaU * (1 - covU) * SaU)
    VbUt = (survbU * .75 * VbU) + (survaU * covU * VaU)
    
    ScUt = (survcU * (14 / 15) * ScU) + (survbU * 0.15 * SbU)
    VcUt = (survcU * (14 / 15) * VcU) + (survbU * 0.15 * VbU)
    
    migration = (br / migpor) * survdR * SdR
    migrationvacc = (br / migpor) * survdR * VdR
    
    SdUt = (survdU * (29 / 30) * SdU) + (survcU * ScU / 15) + migration
    VdUt = (survdU * (29 / 30) * VdU) + (survcU * VcU / 15) + migrationvacc
    
    SeUt = (surveU * SeU) + (survdU * SdU / 30)
    VeUt = (surveU * VeU) + (survdU * VdU / 30)
    
    SaRt = br * (ScR + VcR)
    
    SbRt = (survbR * .75 * SbR) + (survaR * (1 - covR) * SaR)
    VbRt = (survbR * .75 * VbR) + (survaR * covR * SaR)
    
    ScRt = (survcR * (14 / 15) * ScR) + (survbR * 0.15 * SbR)
    VcRt = (survcR * (14 / 15) * VcR) + (survbR * 0.15 * VbR)
    
    SdRt = (survdR * (29 / 30) * SdR) + (survcR * ScR / 15) - migration
    VdRt = (survdR * (29 / 30) * VdR) + (survcR * VcR / 15) - migrationvacc
    
    SeRt = (surveR * SeR) + (survdR * SdR / 30)
    VeRt = (surveR * VeR) + (survdR * VdR / 30)

    UrbanVaccRates = [VaU, VbUt, VcUt, VdUt, VeUt]
    UrbanSuscRates = [SaUt, SbUt, ScUt, VcUt, VeRt]

    RuralVaccRates = [VaR, VbRt, VcRt, VdRt, VeRt]
    RuralSuscRates = [SaRt, SbRt, ScRt, SdRt, SeRt]

    TotalUrb = sum(UrbanVaccRates) + sum(UrbanSuscRates)
    TotalRur = sum(RuralVaccRates) + sum(RuralSuscRates)
    
    for i in range(0,5):
        
        UrbanVaccRates[i] = UrbanVaccRates[i] / TotalUrb
        UrbanSuscRates[i] = UrbanSuscRates[i] / TotalUrb
        
        RuralVaccRates[i] = RuralVaccRates[i] / TotalRur
        RuralSuscRates[i] = RuralSuscRates[i] / TotalRur
        
    UrbanRates = (UrbanSuscRates, UrbanVaccRates)
    RuralRates = (RuralSuscRates, RuralVaccRates)
    
    return(UrbanRates, RuralRates)

def HerdImmunity(covU=0.1, covR=0.1, migpor=0.1, br=(18.1/1000), R0=9, SaU=0.1,SbU=0.1,ScU=0.1,SdU=0.1,SeU=0.1,SaR=0.1,SbR=0.1,ScR=0.1,SdR=0.1,SeR=0.1,VbU=0.1,VcU=0.1,VdU=0.1,VeU=0.1,VbR=0.1,VcR=0.1,VdR=0.1,VeR=0.1,survaU=0.9,survbU=0.9,surbcU=0.9,survcU=0.9,survdU=0.9,surveU=0.9,survaR=0.9,survbR=0.9,survcR=0.9,survdR=0.9,surveR=0.9):

    Urban, Rural = NextStep(covU, covR, migpor, br, R0, SaU, SbU, ScU, SdU, SeU, SaR, SbR, ScR, SdR, SeR, VbU, VcU, VdU, VeU, VbR, VcR, VdR, VeR, survaU, survbU, survcU, survcU, survdU, surveU, survaR, survbR, survcR, survdR, surveR) 
    '''
    Given the Rnought value look for the new R susceptible value to calculate how it
    is influenced by vaccination rate
    '''
    MinVacc = 1 - (1 / R0)
    TotVacc = Urban[1][1] + Urban[1][2] + Urban[1][3] + Urban[1][4]
    print(TotVacc > MinVacc)
    return(TotVacc > MinVacc)

def OverTime(t, covU=0.1, covR=0.1, migpor=0.1, br=(18.1/1000), R0=5, SaU=0.1,SbU=0.1,ScU=0.1,SdU=0.1,SeU=0.1,SaR=0.1,SbR=0.1,ScR=0.1,SdR=0.1,SeR=0.1,VbU=0.1,VcU=0.1,VdU=0.1,VeU=0.1,VbR=0.1,VcR=0.1,VdR=0.1,VeR=0.1,survaU=0.9,survbU=0.9,surbcU=0.9,survcU=0.9,survdU=0.9,surveU=0.9,survaR=0.9,survbR=0.9,survcR=0.9,survdR=0.9,surveR=0.9):

    for i in range(1, t+1):
        if i == t:
            return(NextStep(covU, covR, migpor, br, R0, SaU, SbU, ScU, SdU, SeU, SaR, SbR, ScR, SdR, SeR, VbU, VcU, VdU, VeU, VbR, VcR, VdR, VeR, survaU, survbU, surbcU, survcU, survdU, surveU, survaR, survbR, survcR, survdR, surveR))
        else:
            Urban, Rural = NextStep(covU, covR, migpor, br, R0, SaU, SbU, ScU, SdU, SeU, SaR, SbR, ScR, SdR, SeR, VbU, VcU, VdU, VeU, VbR, VcR, VdR, VeR, survaU, survbU, surbcU, survcU, survdU, surveU, survaR, survbR, survcR, survdR, surveR)
            
            SaU = Urban[0][0]
            SbU = Urban[0][1]
            ScU = Urban[0][2]
            SdU = Urban[0][3]
            SeU = Urban[0][4]
            
            VbU = Urban[1][1]
            VcU = Urban[1][2]
            VdU = Urban[1][3]
            VeU = Urban[1][4]
            
            SaR = Rural[0][0]
            SbR = Rural[0][1]
            ScR = Rural[0][2]
            SdR = Rural[0][3]
            SeR = Rural[0][4]
            
            VbR = Rural[1][1]
            VcR = Rural[1][2]
            VdR = Rural[1][3]
            VeR = Rural[1][4]   

def LowestVacc(t, covU=0.1, covR=0.1, migpor=0.1, br=(18.1/1000), R0=5, SaU=0.1,SbU=0.1,ScU=0.1,SdU=0.1,SeU=0.1,SaR=0.1,SbR=0.1,ScR=0.1,SdR=0.1,SeR=0.1,VbU=0.1,VcU=0.1,VdU=0.1,VeU=0.1,VbR=0.1,VcR=0.1,VdR=0.1,VeR=0.1,survaU=0.9,survbU=0.9,surbcU=0.9,survcU=0.9,survdU=0.9,surveU=0.9,survaR=0.9,survbR=0.9,survcR=0.9,survdR=0.9,surveR=0.9):
    '''
    Inputs data about a population and its associated rates and outputs the lowest vaccination rate needed in the migrating community in order to sustain herd immunity.
    '''
    coverage = covU
    migration = migpor
    Urban, Rural = OverTime(t, covU=coverage, migpor=migration)
    MinVacc = 0.8
    #MinVacc = 1 - (1/R0)
    TotalVacc = sum(Urban[1])
    AddedVacc = MinVacc - TotalVacc
    print
    lowestVacc = AddedVacc * migpor / survdR #Finds lowest VdR needed for MinVacc to be met
    return(lowestVacc)

def heatmapmatrix(t, covU=0.5, covR=0.5, migpor=0.5, br=(18.1/1000), R0=18, SaU=0.5,SbU=0.5,ScU=0.5,SdU=0.5,SeU=0.5,SaR=0.5,SbR=0.5,ScR=0.5,SdR=0.5,SeR=0.5,VbU=0.5,VcU=0.5,VdU=0.5,VeU=0.5,VbR=0.5,VcR=0.5,VdR=0.5,VeR=0.5,survaU=0.5,survbU=0.5,surbcU=0.5,survcU=0.5,survdU=0.5,surveU=0.5,survaR=0.5,survbR=0.5,survcR=0.5,survdR=0.5,surveR=0.5):
	matrix = []
	for i in range(0, 5):
		var2 = (i * 0.01) + 0.75
		row = []
		for j in range(1, 5):
			var = j * 0.1
			rate = LowestVacc(t, var2, covR=0.5, migpor=var, br=(18.1/1000), R0=18, SaU=0.5,SbU=0.5,ScU=0.5,SdU=0.5,SeU=0.5,SaR=0.5,SbR=0.5,ScR=0.5,SdR=0.5,SeR=0.5,VbU=0.5,VcU=0.5,VdU=0.5,VeU=0.5,VbR=0.5,VcR=0.5,VdR=0.5,VeR=0.5,survaU=0.5,survbU=0.5,surbcU=0.5,survcU=0.5,survdU=0.5,surveU=0.5,survaR=0.5,survbR=0.5,survcR=0.5,survdR=0.5,surveR=0.5)
			row.append(rate)
		matrix.append(row)
	return(matrix)
	
x = heatmapmatrix(1)
for i in x:
    print(i)